options
{
  IGNORE_CASE = false;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(ArduinoAST)

import java.io.*;
import java.util.*;


/** ArduinoAST class */
public class ArduinoAST {
	//public static Hashtable ST = new Hashtable();

	/** Main entry point */
	public static void main(String args[]) throws ParseException, FileNotFoundException {
		String temp;
		//STC temp2;

		if(args.length < 1) {
			// Prompt user for a file to compile
			System.out.println("Please pass in a filename of file to compile.");
			System.exit(1);
		}

		ArduinoAST parser = new ArduinoAST(new FileInputStream(args[0]));
		SimpleNode root = parser.Start();
		root.dump(" ");

		System.out.println();
		/*System.out.println("Symbol table:"); // Prints out a symbol tree

		Enumeration t = ST.keys();

		while (t.hasMoreElements()) {
			temp = (String).t.nextElement();
			temp2 = (STC)ST.get(temp);
			System.out.println(temp); // DOC HERE PLEASE

			if(temp2.type != null) {
				System.out.println(" type = " + temp2.type); // Print the type of the element
			}

			if(temp2.value != null) {
				System.out.println(" value = " + temp2.value); // Print the value of the element
			}
		}
	*/
		System.out.println(); // New line
		System.out.println("Progam: "); 

		PrintVisitor pv = new PrintVisitor(); // Instantiate the print visitor
		root.jjAccept(pv, null); // Print out the program

		/*System.out.println();
		System.out.println("Type Checking:");
		TypeCheckVisitor tc = new TypeCheckVisitor();
		root.jjAccept(tc, ST); // Print out any type errors
		*/
	}
}

PARSER_END(ArduinoAST)

/* Skip whitespace */
SKIP :
{
	" "
| "\t"
| "\n"
| "\r"	
| "\f"
}

/* Comments */
MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN : /* Reserved words and literals */
{
	< BOOLEAN: "boolean" >
|	< DOUBLE: "double" >
|	< ELSE: "else" >
|	< ELSEIF: "elseif" >
|	< FALSE: "false" >
|	< FLOAT: "float" >
|	< IF: "if" >
|	< INT: "int" >
|	< NULL: "null" >
|	< STRING: "string" >
|	< TRUE: "true" >
|	< WHILE: "while" >
| 	< DO: "do" >
| 	< END: "end" >
|   < VOID: "void" >
|   < FUNCTION: "function" >
|   < RETURN: "return" >
}

/* Literals */
TOKEN : 
{
	< INTEGER_LITERAL: 
		<DECIMAL_LITERAL> (["l", "L"])?
	>

|	< #DECIMAL_LITERAL: ["1"-"9"] (["0" - "9"])* >

|	< FLOATING_POINT_LITERAL:
		  (["0" - "9"])+ "." (["0" - "9"])* (<EXPONENT>)? (["f", "F", "d", "D"])?
		| "." (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]
	>

|	< #EXPONENT: ["e", "E"] (["+","-"])? (["0" - "9"])+ >

|	< CHARACTER_LITERAL:
		"'"
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)	
		"'"
	>

|	< STRING_LITERAL:
		"\""
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)*
		"\""
	>
}

/* Identifiers */
TOKEN :
{
	< IDENTIFIER: <LETTER> (<PART_LETTER>)* >

|	< #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
		"$",
		"A"-"Z",
		"_",
		"a"-"z"
      ]
	>

|	< #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]

	>	
}

TOKEN : /* Seperators */
{
	< LPAREN: "(" >
|	< RPAREN: ")" >
|	< LBRACE: "{" >
|	< RBRACE: "}" >
|	< LBRACKET: "[" >
|	< RBRACKET: "]" >
|	< SEMICOLON: ";" >
|	< COMMA: "," >
|	< DOT: "." > 
}

TOKEN : /* Operators */
{
	< ASSIGN: "=" >
|	< GT: ">" >
|	< LT: "<" >
|	< COLON: ":" >
|	< EQ: "==" >
|	< LE: "<=" >
|	< GE: ">=" >
|	< NE: "!=" >
|	< SC_OR: "||" >
|	< SC_AND: "&&" >
|	< PLUS: "+" >
|	< MINUS: "-" >
|	< MULTIPLY: "*" >
|	< DIVIDE: "/" >
|	< MOD: "%" >
|	< SQRT: "sqrt" >
|	< POW: "^" >
|   < NOT: "!" >
}

/*TOKEN :
{
	< Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}*/

/*********************************************
*	LANGUAGE GRAMMAR STARTS HERE 							 *
*********************************************/



/** Root production */
/*void Input() :
{}
{
	( <Id> )+ <EOF> 
}*/

/* If statement grammar */

SimpleNode Start() :
{}
{   
    "setup()" < LBRACE > [Statement()] < RBRACE > "loop()" < LBRACE > Statement()	 < RBRACE > <EOF>{return jjtThis;}

    //Statement()
}

/* Statement */
void Statement() : 
{}
{   
	(    //EmptyStatement()
		    IfStatement()
		|   WhileStatement()
		|   VariableDeclaration()
		|   FunctionDeclaration()
		|   FunctionCall()
	)+
}

void EmptyStatement() :
{}
{
    ";"
}

void FunctionDeclaration() :
{}
{
    (<VOID> | PrimitiveTypes()) <FUNCTION> Name()<LPAREN>[Name()(<COMMA>Name())*]<RPAREN> <DO> Statement() [<RETURN> Name() <SEMICOLON>] <END> 
}

void FunctionCall() :
{}
{
	Name()(<DOT>Name())*<LPAREN>[(Name() | Literal())(<COMMA>(Name() | Literal()))*]<RPAREN><SEMICOLON> // Local function and call of method in other class
}

void IfStatement() :
{}
{
    <IF> <LPAREN> BooleanExpression() <RPAREN> <DO> Statement() <END> [<ELSEIF> <LPAREN> Expression() <RPAREN> <DO> Statement() <END>] [<ELSE> <DO> Statement() <END>]
}

/* While loop */
void WhileStatement() :
{}
{
	<WHILE> <LPAREN> BooleanExpression() <RPAREN> <DO> Statement() <END>
}

void Expression() :
{}
{
	ArithmeticExpression()
|   BooleanExpression()
|   VariableDeclaration()
}

void VariableDeclaration() :
{}
{
    PrimitiveTypes() Name() <ASSIGN> ((Literal() | Name()) (ArithmeticExpression() (Literal() | Name()))* | < LPAREN > BooleanExpression() < RPAREN >) <SEMICOLON>
}


void Name() #Identifier :
{Token t;}
{
    t=<IDENTIFIER> {jjtThis.value = t.image;}
}

void PrimitiveTypes() :
{}
{
   NumberType()
|  <STRING>
}

void NumberType() :
{}
{
	<INT>
|	<DOUBLE>
|	<FLOAT>
}

void ArithmeticExpression() :
{}
{
	(<PLUS> | <MINUS> | <MULTIPLY> | <DIVIDE> | <MOD> | <SQRT> | <POW>)

}

void NumberSize() :
{}
{
	<INTEGER_LITERAL>
|	<FLOATING_POINT_LITERAL>
}

void BooleanExpression() :
{}
{
    RelationalExpression()
|   Name()
}


void RelationalExpression() :
{}
{

	Literal() ( ( <LT> | <GT> | <LE> | <GE> | <EQ> | <NE>) Literal() )*
}

void Literal() :
{}
{
    <INTEGER_LITERAL>
|	<FLOATING_POINT_LITERAL>
|	<CHARACTER_LITERAL>
|	<STRING_LITERAL>
|	BooleanLiteral()
|	NullLiteral()
}



void BooleanLiteral() :
{}
{
	<TRUE>
|	<FALSE>
}

void NullLiteral() :
{}
{
	<NULL>
}