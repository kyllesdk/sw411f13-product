/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ArduinoLang.jj */
/*@egen*/options
{
  IGNORE_CASE = false;
               
                 
}

PARSER_BEGIN(ArduinoLang)

import java.io.*;
import java.util.*;


/** ArduinoLang class */
public class ArduinoLang/*@bgen(jjtree)*/implements ArduinoLangTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTArduinoLangState jjtree = new JJTArduinoLangState();

/*@egen*/
	public static Hashtable ST = new Hashtable();

	/** Main entry point */
	public static void main(String args[]) throws ParseException, FileNotFoundException {
		String temp;
		STC temp2;

		if(args.length < 1) {
			// Prompt user for a file to compile
			System.out.println("Please pass in a filename of file to compile.");
			System.exit(1);
		}

		ArduinoLang parser = new ArduinoLang(new FileInputStream(args[0]));
		SimpleNode root = parser.Program();

		System.out.println("Abstract Syntax Tree:");

		root.dump(" ");

		System.out.println("==========================================");
		System.out.println("Symbol table:"); // Prints out a symbol tree

		Enumeration t = ST.keys();

		while (t.hasMoreElements()) {
			temp = (String)t.nextElement();
			temp2 = (STC)ST.get(temp);
			System.out.println(temp); // DOC HERE PLEASE

			if(temp2.type != null) {
				System.out.println(" type = " + temp2.type); // Print the type of the element
			}

			if(temp2.value != null) {
				System.out.println(" value = " + temp2.value); // Print the value of the element
			}

			if(temp2.stringValue != null) {
				System.out.println(" value = " + temp2.stringValue); // Print the value of the element if it is a string
			}
		}
		
		System.out.println("=========================================="); // New line
		System.out.println("Progam: "); 

		PrintVisitor pv = new PrintVisitor(); // Instantiate the print visitor
		root.jjtAccept(pv, null); // Print out the program

		System.out.println();
		/*System.out.println("Type Checking:");
		TypeCheckVisitor tc = new TypeCheckVisitor();
		root.jjAccept(tc, ST); // Print out any type errors*/

	}
}

PARSER_END(ArduinoLang)

/* Skip whitespace */
SKIP :
{
	" "
| "\t"
| "\n"
| "\r"	
| "\f"
}

/* Comments */
MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN : /* Reserved words and literals */
{
	< SETUP : "setup()" >
|	< LOOP: "loop()" >	
|	< CALL: "call" >
|	< BOOLEAN: "boolean" >
|	< DOUBLE: "double" >
|	< ELSE: "else" >
|	< ELSEIF: "elseif" >
|	< FALSE: "false" >
|	< FLOAT: "float" >
|	< IF: "if" >
|	< INT: "int" >
|	< NULL: "null" >
|	< STRING: "string" >
|	< TRUE: "true" >
|	< WHILE: "while" >
| 	< DO: "do" >
| 	< END: "end" >
|   < VOID: "void" >
|   < FUNCTION: "function" >
|   < RETURN: "return" >
}

/* Literals */
TOKEN : 
{
	< INTEGER_LITERAL: 
		<DECIMAL_LITERAL> (["l", "L"])?
	>

|	< #DECIMAL_LITERAL: ["0"-"9"] (["0" - "9"])* >

|	< FLOATING_POINT_LITERAL:
		  (["0" - "9"])+ "." (["0" - "9"])* (<EXPONENT>)? (["f", "F", "d", "D"])?
		| "." (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]
	>

|	< #EXPONENT: ["e", "E"] (["+","-"])? (["0" - "9"])+ >

|	< CHARACTER_LITERAL:
		"'"
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)	
		"'"
	>

|	< STRING_LITERAL:
		"\""
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)*
		"\""
	>
}

/* Identifiers */
TOKEN :
{
	/*< IDENTIFIER: <LETTER> (<PART_LETTER>)* >*/
	< #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
		"$",
		"A"-"Z",
		"_",
		"a"-"z"
      ]
	>

|	< #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]

	>	
}

TOKEN : /* Seperators */
{
	< LPAREN: "(" >
|	< RPAREN: ")" >
|	< LBRACE: "{" >
|	< RBRACE: "}" >
|	< LBRACKET: "[" >
|	< RBRACKET: "]" >
|	< SEMICOLON: ";" >
|	< COMMA: "," >
|	< DOT: "." > 
|	< ID: ["a"-"z","A"-"Z","."] ( ["a"-"z","A"-"Z","0"-"9", "."] )* >
//|	< PARAMETER: ["(","a"-"z","A"-"Z","0"-"9","\"",","] ( ["a"-"z","A"-"Z","0"-"9","\"" ,","] )* [")"] >
}

TOKEN : /* Operators */
{
	< ASSIGN: "=" >
|	< COLON: ":" >
|	< BOOL_OP: "&&" | "||" | "<=" | ">=" | "!" | "==">
|	< GT: ">" >
|	< LT: "<" >
|	< ADD_OP: "+" | "-" >
|	< MULTIPLY: "*" >
|	< DIVISION: "/" >
|	< MOD: "%" >
| 	< POW: "^" >
|	< EMPTY: "" >
|	< HASHTAG: "#" >
}

/*TOKEN :
{
	< Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}*/

/*********************************************
*	LANGUAGE GRAMMAR STARTS HERE 							 *
*********************************************/



/** Root production */
/*void Input() :
{}
{
	( <Id> )+ <EOF> 
}*/

/* If statement grammar */

SimpleNode Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/   
	ProgramTop() ProgramContent() <EOF>/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ProgramContent()                 : {/*@bgen(jjtree) ProgramContent */
                                         ASTProgramContent jjtn000 = new ASTProgramContent(JJTPROGRAMCONTENT);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ProgramContent */
        try {
/*@egen*/
	ProgramSetup() ProgramLoop()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ProgramTop()             : {/*@bgen(jjtree) ProgramTop */
                                 ASTProgramTop jjtn000 = new ASTProgramTop(JJTPROGRAMTOP);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ProgramTop */
        try {
/*@egen*/
	(
	t = <HASHTAG> Identifier() <LT> Identifier() <GT>/*@bgen(jjtree) #ProgramLibInclude( 2) */
                                                          {
                                                            ASTProgramLibInclude jjtn001 = new ASTProgramLibInclude(JJTPROGRAMLIBINCLUDE);
                                                            boolean jjtc001 = true;
                                                            jjtree.openNodeScope(jjtn001);
                                                          }
                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                            jjtc001 = false;
                                                          }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                          } finally {
                                                            if (jjtc001) {
                                                              jjtree.closeNodeScope(jjtn001,  2);
                                                            }
                                                          }
/*@egen*/                      
	| ClassInstantiation()
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ProgramStart()       : {Token t;}
{/*@bgen(jjtree) #ProgramStart( 2) */
        {
          ASTProgramStart jjtn001 = new ASTProgramStart(JJTPROGRAMSTART);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(ProgramTop() ProgramSetup() ProgramLoop())/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/                  
}

void ProgramSetup()       : {Token t;}
{
	t = <SETUP> <DO> [Statements()] <END>/*@bgen(jjtree) #ProgramSetup( 1) */
                                              {
                                                ASTProgramSetup jjtn001 = new ASTProgramSetup(JJTPROGRAMSETUP);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                              }
                                              try {
/*@egen*//*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn001,  1);
                                                jjtc001 = false;
                                              }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  1);
                                                }
                                              }
/*@egen*/                 
}

void ProgramLoop()       : {Token t;}
{
	t = <LOOP> <DO> [Statements()] <END>/*@bgen(jjtree) #ProgramLoop( 1) */
                                             {
                                               ASTProgramLoop jjtn001 = new ASTProgramLoop(JJTPROGRAMLOOP);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn001,  1);
                                               jjtc001 = false;
                                             }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  1);
                                               }
                                             }
/*@egen*/                
}

void Statements()       : {}
{
	(SimpleStatement() [/*@bgen(jjtree) #Statements( 2) */
                            {
                              ASTStatements jjtn001 = new ASTStatements(JJTSTATEMENTS);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/Statements()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/               ])
}

void SimpleStatement()       : {}
{
	(Expression()) | (Declaration() | IfStatement() | WhileStatement() | FunctionCall())
}

void Declaration()              : {/*@bgen(jjtree) Declaration */
                                   ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String name; Token value; String stringText;}
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
	t = <INT> name = Identifier() <ASSIGN> (Expression())* <SEMICOLON>/*@bgen(jjtree)*/
                                                                           {
                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                             jjtc000 = false;
                                                                           }
/*@egen*/ {jjtn000.value = t.image;}
	| t = <FLOAT> name = Identifier() <ASSIGN> (Expression())* <SEMICOLON>/*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                               }
/*@egen*/ {jjtn000.value = t.image;}
	| t = <STRING> name = Identifier() <ASSIGN> (Expression())* <SEMICOLON>/*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
                                                                                }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	
String DeclarationLogic()       : {Token t;}
{
	<ASSIGN> t = Number()/*@bgen(jjtree) #DeclarationLogic( 1) */
                              {
                                ASTDeclarationLogic jjtn001 = new ASTDeclarationLogic(JJTDECLARATIONLOGIC);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  1);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.value = t.image; return t.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                }
                              }
/*@egen*/                     
}

/**
* Expression
* @accepts
* @accepts 
**/
void Expression()             : {/*@bgen(jjtree) Expression */
                                 ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	// Term()
	// (
	// 	(t = <ADD_OP> Term() {jjtThis.value = t.image;} #Add_op(2))
	// )*
	(<LPAREN> Expression() <RPAREN>
	|
	Term()(
		(t = <ADD_OP> Expression())/*@bgen(jjtree) #Add_op( 2) */
                                           {
                                             ASTAdd_op jjtn001 = new ASTAdd_op(JJTADD_OP);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                             jjtc001 = false;
                                           }
/*@egen*/{jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001,  2);
                                             }
                                           }
/*@egen*/           
		| (t = <MULTIPLY> Expression())/*@bgen(jjtree) #Add_op( 2) */
                                               {
                                                 ASTAdd_op jjtn002 = new ASTAdd_op(JJTADD_OP);
                                                 boolean jjtc002 = true;
                                                 jjtree.openNodeScope(jjtn002);
                                               }
                                               try {
/*@egen*//*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                                 jjtc002 = false;
                                               }
/*@egen*/{jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc002) {
                                                   jjtree.closeNodeScope(jjtn002,  2);
                                                 }
                                               }
/*@egen*/           
		| (t = <DIVISION> Expression())/*@bgen(jjtree) #Add_op( 2) */
                                               {
                                                 ASTAdd_op jjtn003 = new ASTAdd_op(JJTADD_OP);
                                                 boolean jjtc003 = true;
                                                 jjtree.openNodeScope(jjtn003);
                                               }
                                               try {
/*@egen*//*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn003,  2);
                                                 jjtc003 = false;
                                               }
/*@egen*/{jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc003) {
                                                   jjtree.closeNodeScope(jjtn003,  2);
                                                 }
                                               }
/*@egen*/           
		| (t = <POW> Expression())/*@bgen(jjtree) #Add_op( 2) */
                                          {
                                            ASTAdd_op jjtn004 = new ASTAdd_op(JJTADD_OP);
                                            boolean jjtc004 = true;
                                            jjtree.openNodeScope(jjtn004);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn004,  2);
                                            jjtc004 = false;
                                          }
/*@egen*/{jjtn004.value = t.image;}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc004) {
                                              jjtree.closeNodeScope(jjtn004,  2);
                                            }
                                          }
/*@egen*/           
		| (t = <LPAREN> Expression()<RPAREN>/*@bgen(jjtree) #Add_op( 2) */
                                                     {
                                                       ASTAdd_op jjtn005 = new ASTAdd_op(JJTADD_OP);
                                                       boolean jjtc005 = true;
                                                       jjtree.openNodeScope(jjtn005);
                                                     }
                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn005,  2);
                                                       jjtc005 = false;
                                                     }
/*@egen*/ {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc005) {
                                                         jjtree.closeNodeScope(jjtn005,  2);
                                                       }
                                                     }
/*@egen*/           )
		| (t = <MOD> Expression())/*@bgen(jjtree) #Add_op( 2) */
                                          {
                                            ASTAdd_op jjtn006 = new ASTAdd_op(JJTADD_OP);
                                            boolean jjtc006 = true;
                                            jjtree.openNodeScope(jjtn006);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn006,  2);
                                            jjtc006 = false;
                                          }
/*@egen*/{jjtn006.value = t.image;}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc006) {
                                              jjtree.closeNodeScope(jjtn006,  2);
                                            }
                                          }
/*@egen*/           
	)*
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
* If-statement
*
**/
void IfStatement()         : {/*@bgen(jjtree) If_stm */
                              ASTIf_stm jjtn000 = new ASTIf_stm(JJTIF_STM);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) If_stm */
        try {
/*@egen*/
	(t = <IF><LPAREN>BooleanExpression()<RPAREN> <DO> Statements() <END> (ElseifStatement())* [ElseStatement()]/*@bgen(jjtree)*/
                                                                                                                    {
                                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                                      jjtc000 = false;
                                                                                                                    }
/*@egen*/ {jjtn000.value = t.image;})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
* Elseif-statement
*
**/
void ElseifStatement()            : {/*@bgen(jjtree) ElsIf_stm */
                                     ASTElsIf_stm jjtn000 = new ASTElsIf_stm(JJTELSIF_STM);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ElsIf_stm */
        try {
/*@egen*/
	(t = <ELSEIF><LPAREN>BooleanExpression()<RPAREN> <DO> Statements() <END>/*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                  jjtc000 = false;
                                                                                }
/*@egen*/{jjtn000.value = t.image;})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
* Else statement
*
**/
void ElseStatement()       : {Token t;}
{
	(t = <ELSE> <DO> Statements() <END>)/*@bgen(jjtree) #Els_stm( 1) */
                                             {
                                               ASTEls_stm jjtn001 = new ASTEls_stm(JJTELS_STM);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn001,  1);
                                               jjtc001 = false;
                                             }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  1);
                                               }
                                             }
/*@egen*/            
}

/**
* While statement
*
**/
void WhileStatement()       : {Token t;}
{
	(t = <WHILE> <LPAREN> BooleanExpression() <RPAREN> <DO> Statements() <END>)/*@bgen(jjtree) #WhileStatement( 2) */
                                                                                    {
                                                                                      ASTWhileStatement jjtn001 = new ASTWhileStatement(JJTWHILESTATEMENT);
                                                                                      boolean jjtc001 = true;
                                                                                      jjtree.openNodeScope(jjtn001);
                                                                                    }
                                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                                    {
                                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                                      jjtc001 = false;
                                                                                    }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                                                    } finally {
                                                                                      if (jjtc001) {
                                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                                      }
                                                                                    }
/*@egen*/                   
}

void BooleanExpression()       : {Token t;}
{
	Expression()( 
	t = <BOOL_OP> Expression()/*@bgen(jjtree) #Bool_op( 2) */
                                   {
                                     ASTBool_op jjtn001 = new ASTBool_op(JJTBOOL_OP);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtc001 = false;
                                   }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
                                   }
/*@egen*/            
	| t = <GT> Expression()/*@bgen(jjtree) #Bool_op( 2) */
                                {
                                  ASTBool_op jjtn002 = new ASTBool_op(JJTBOOL_OP);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                  jjtc002 = false;
                                }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002,  2);
                                  }
                                }
/*@egen*/            
	| t = <LT> Expression()/*@bgen(jjtree) #Bool_op( 2) */
                                {
                                  ASTBool_op jjtn003 = new ASTBool_op(JJTBOOL_OP);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn003,  2);
                                  jjtc003 = false;
                                }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003,  2);
                                  }
                                }
/*@egen*/            
	)*
}

void FunctionCall()       : {Token t; String name;}
{
	(t = <CALL> name = Identifier() (Identifier())* <LPAREN>(Parameters())*<RPAREN><SEMICOLON>)/*@bgen(jjtree) #FunctionCall( 2) */
                                                                                                   {
                                                                                                     ASTFunctionCall jjtn001 = new ASTFunctionCall(JJTFUNCTIONCALL);
                                                                                                     boolean jjtc001 = true;
                                                                                                     jjtree.openNodeScope(jjtn001);
                                                                                                   }
                                                                                                   try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                   {
                                                                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                                                                     jjtc001 = false;
                                                                                                   }
/*@egen*/{jjtn001.value = t;}/*@bgen(jjtree)*/
                                                                                                   } finally {
                                                                                                     if (jjtc001) {
                                                                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                                                                     }
                                                                                                   }
/*@egen*/                 
}

void ClassInstantiation()                     : {/*@bgen(jjtree) ClassInstantiation */
                                                 ASTClassInstantiation jjtn000 = new ASTClassInstantiation(JJTCLASSINSTANTIATION);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String name;}
{/*@bgen(jjtree) ClassInstantiation */
        try {
/*@egen*/
	(<CALL> Identifier() (Identifier())* <LPAREN>(Parameters())*<RPAREN><SEMICOLON>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Parameters()            : {/*@bgen(jjtree) Parameter */
                                ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String text;}
{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/
	((t = Number()(","Parameters())*)/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/{jjtn000.value = t;}
|	(text = StringText()(","Parameters())*)/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/{jjtn000.value = text;}
|	(text = Identifier()(","Parameters())*)/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/{jjtn000.value = text;}
)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
* Term
* @accepts 
**/
void Term()       : {Token t;}
{
/*	<NOT> Factor() #Not_op(1)
	| Factor() (t = <MULTIPLY> Factor() {jjtThis.value = t.image;} #Mult_op(2))*
*/
	(Number() | Identifier())
}

/**
* Factor
* @accepts "("Expression")""
* @accepts Number
* @accepts Identifier
**/
void Factor()         : {/*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Factor */
        try {
/*@egen*/
	/*(<LPAREN> Expression() #Expression(1) <RPAREN>
	| Number()
	| Identifier()
	)*/
	Number()
	| Identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
* Number
* @accepts <INTEGER_LITERAL>
* @accepts <FLOATING_POINT_LITERAL>
**/
Token Number() : {/*@bgen(jjtree) Number */
                  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
        try {
/*@egen*/
	(
		t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {jjtn000.value = t.image; return t;}
		| t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/ {jjtn000.value = t; return t;}
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String StringText() : {/*@bgen(jjtree) StringText */
                       ASTStringText jjtn000 = new ASTStringText(JJTSTRINGTEXT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StringText */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
* Identifier
* @accepts <ID> (a-z, A-Z)
**/
String Identifier() : {/*@bgen(jjtree) Identifier */
                       ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = <ID>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


