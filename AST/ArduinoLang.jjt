options
{
  IGNORE_CASE = false;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(ArduinoLang)

import java.io.*;
import java.util.*;


/** ArduinoLang class */
public class ArduinoLang {
	public static Hashtable ST = new Hashtable();

	/** Main entry point */
	public static void main(String args[]) throws ParseException, FileNotFoundException {
		String temp;
		STC temp2;

		if(args.length < 1) {
			// Prompt user for a file to compile
			System.out.println("Please pass in a filename of file to compile.");
			System.exit(1);
		}

		ArduinoLang parser = new ArduinoLang(new FileInputStream(args[0]));
		SimpleNode root = parser.Program();

		System.out.println("Abstract Syntax Tree:");

		root.dump(" ");

		System.out.println("==========================================");
		System.out.println("Symbol table:"); // Prints out a symbol tree

		Enumeration t = ST.keys();

		while (t.hasMoreElements()) {
			temp = (String)t.nextElement();
			temp2 = (STC)ST.get(temp);
			System.out.println(temp); // DOC HERE PLEASE

			if(temp2.type != null) {
				System.out.println(" type = " + temp2.type); // Print the type of the element
			}

			if(temp2.value != null) {
				System.out.println(" value = " + temp2.value); // Print the value of the element
			}

			if(temp2.stringValue != null) {
				System.out.println(" value = " + temp2.stringValue); // Print the value of the element if it is a string
			}
		}
		
		System.out.println("=========================================="); // New line
		System.out.println("Progam: "); 

		PrintVisitor pv = new PrintVisitor(); // Instantiate the print visitor
		root.jjtAccept(pv, null); // Print out the program

		System.out.println();
		/*System.out.println("Type Checking:");
		TypeCheckVisitor tc = new TypeCheckVisitor();
		root.jjAccept(tc, ST); // Print out any type errors*/

	}
}

PARSER_END(ArduinoLang)

/* Skip whitespace */
SKIP :
{
	" "
| "\t"
| "\n"
| "\r"	
| "\f"
}

/* Comments */
MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN : /* Reserved words and literals */
{
	< SETUP : "setup()" >
|	< LOOP: "loop()" >	
|	< CALL: "call" >
|	< BOOLEAN: "boolean" >
|	< DOUBLE: "double" >
|	< ELSE: "else" >
|	< ELSEIF: "elseif" >
|	< FALSE: "false" >
|	< FLOAT: "float" >
|	< IF: "if" >
|	< INT: "int" >
|	< NULL: "null" >
|	< STRING: "string" >
|	< TRUE: "true" >
|	< WHILE: "while" >
| 	< DO: "do" >
| 	< END: "end" >
|   < VOID: "void" >
|   < FUNCTION: "function" >
|   < RETURN: "return" >
}

/* Literals */
TOKEN : 
{
	< INTEGER_LITERAL: 
		<DECIMAL_LITERAL> (["l", "L"])?
	>

|	< #DECIMAL_LITERAL: ["0"-"9"] (["0" - "9"])* >

|	< FLOATING_POINT_LITERAL:
		  (["0" - "9"])+ "." (["0" - "9"])* (<EXPONENT>)? (["f", "F", "d", "D"])?
		| "." (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]
	>

|	< #EXPONENT: ["e", "E"] (["+","-"])? (["0" - "9"])+ >

|	< CHARACTER_LITERAL:
		"'"
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)	
		"'"
	>

|	< STRING_LITERAL:
		"\""
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)*
		"\""
	>
}

/* Identifiers */
TOKEN :
{
	/*< IDENTIFIER: <LETTER> (<PART_LETTER>)* >*/
	< #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
		"$",
		"A"-"Z",
		"_",
		"a"-"z"
      ]
	>

|	< #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]

	>	
}

TOKEN : /* Seperators */
{
	< LPAREN: "(" >
|	< RPAREN: ")" >
|	< LBRACE: "{" >
|	< RBRACE: "}" >
|	< LBRACKET: "[" >
|	< RBRACKET: "]" >
|	< SEMICOLON: ";" >
|	< COMMA: "," >
|	< DOT: "." > 
|	< ID: ["a"-"z","A"-"Z","."] ( ["a"-"z","A"-"Z","0"-"9", "."] )* >
//|	< PARAMETER: ["(","a"-"z","A"-"Z","0"-"9","\"",","] ( ["a"-"z","A"-"Z","0"-"9","\"" ,","] )* [")"] >
}

TOKEN : /* Operators */
{
	< ASSIGN: "=" >
|	< GT: ">" >
|	< LT: "<" >
|	< COLON: ":" >
|	< EQ: "==" >
|	< LE: "<=" >
|	< GE: ">=" >
|	< NE: "!=" >
|	< BOOL_OP: "&&" | "||" >
|	< ADD_OP: "+" | "-" >
|	< MULTIPLY: "*" >
|	< DIVIDE: "/" >
|	< MOD: "%" >
|	< SQRT: "sqrt" >
|	< POW: "^" >
|   < NOT: "!" >
|	< EMPTY: "" >
}

/*TOKEN :
{
	< Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}*/

/*********************************************
*	LANGUAGE GRAMMAR STARTS HERE 							 *
*********************************************/



/** Root production */
/*void Input() :
{}
{
	( <Id> )+ <EOF> 
}*/

/* If statement grammar */

SimpleNode Program() : {}
{   
	ProgramSetup() ProgramLoop() <EOF> {return jjtThis;}
}

void ProgramStart() #void : {Token t;}
{
	(ProgramSetup() ProgramLoop())  #ProgramStart(1)
}

void ProgramSetup() #void : {Token t;}
{
	t = <SETUP> <DO> [Statements()] <END> {jjtThis.value = t.image;} #ProgramSetup(1)
}

void ProgramLoop() #void : {Token t;}
{
	t = <LOOP> <DO> [Statements()] <END> {jjtThis.value = t.image;} #ProgramLoop(1)
}

void Statements() #void : {}
{
	(SimpleStatement() [Statements() #Statements(2)])
}

void SimpleStatement() #void : {}
{
	(Expression()) | (Declaration() | IfStatement() | WhileStatement() | FunctionCall())
}

void Declaration() #void : {Token t; String name; Token value; String stringText;}
{
	t = <INT> name = Identifier() <ASSIGN> value = Number() <SEMICOLON> {jjtThis.value = t.image; ST.put(name, new STC("int", name, value));} #Declaration(2) 
|	t = <FLOAT> name = Identifier() <ASSIGN> value = Number() <SEMICOLON> {jjtThis.value = t.image; ST.put(name, new STC("float", name, value));} #Declaration(2)
|	t = <STRING> name = Identifier() <ASSIGN> stringText = StringText() <SEMICOLON> {jjtThis.value = t.image; ST.put(name, new STC("string", name, stringText));} #Declaration(2)
}

String DeclarationLogic() #void : {Token t;}
{
	<ASSIGN> t = Number() {jjtThis.value = t.image; return t.image;} #DeclarationLogic(1)
}

/**
* Expression
* @accepts
* @accepts 
**/
void Expression() #void : {Token t;}
{
	Term()
	(
		(t = <ADD_OP> Term() {jjtThis.value = t.image;} #Add_op(2))
	)*
}

/**
* If-statement
*
**/
void IfStatement() #If_stm : {Token t;}
{
	(t = <IF><LPAREN>BooleanExpression()<RPAREN> <DO> Statements() <END> (ElseifStatement())* [ElseStatement()] {jjtThis.value = t.image;})
}

/**
* Elseif-statement
*
**/
void ElseifStatement() #ElsIf_stm : {Token t;}
{
	(t = <ELSEIF><LPAREN>BooleanExpression()<RPAREN> <DO> Statements() <END>{jjtThis.value = t.image;})
}

/**
* Else statement
*
**/
void ElseStatement() #void : {Token t;}
{
	(t = <ELSE> <DO> Statements() <END>) {jjtThis.value = t.image;} #Els_stm(1)
}

/**
* While statement
*
**/
void WhileStatement() #void : {Token t;}
{
	(t = <WHILE> <LPAREN> BooleanExpression() <RPAREN> <DO> Statements() <END>) {jjtThis.value = t.image;} #WhileStatement(2)
}

void BooleanExpression() #void : {Token t;}
{
	(Identifier())
}

void FunctionCall() #void : {Token t; String name;}
{
	(t = <CALL> name = Identifier() <LPAREN>Parameters()<RPAREN><SEMICOLON>){jjtThis.value = t;} #FunctionCall(2)
}

void Parameters() #Parameter : {Token t; String text;}
{
	((t = Number()(","Parameters())*){jjtThis.value = t;}
|	(text = StringText()(","Parameters())*){jjtThis.value = text;}
|	(text = Identifier()(","Parameters())*){jjtThis.value = text;}
)
}

/**
* Term
* @accepts 
**/
void Term() #void : {Token t;}
{
	<NOT> Factor() #Not_op(1)
	| Factor() (t = <MULTIPLY> Factor() {jjtThis.value = t.image;} #Mult_op(2))*
}

/**
* Factor
* @accepts "("Expression")""
* @accepts Number
* @accepts Identifier
**/
void Factor() #void : {}
{
	(<LPAREN> Expression() #Expression(1) <RPAREN>
	| Number()
	| Identifier()
	)
}

/**
* Number
* @accepts <INTEGER_LITERAL>
* @accepts <FLOATING_POINT_LITERAL>
**/
Token Number() : {Token t;}
{
	(
		t = <INTEGER_LITERAL> {jjtThis.value = t.image; return t;}
		| t = <FLOATING_POINT_LITERAL> {jjtThis.value = t; return t;}
	)
}

String StringText() : {Token t;}
{
	t = <STRING_LITERAL> {jjtThis.value = t.image; return t.image;}
}

/**
* Identifier
* @accepts <ID> (a-z, A-Z)
**/
String Identifier() : {Token t;}
{
	t = <ID> {jjtThis.value = t.image; return t.image;}
}


