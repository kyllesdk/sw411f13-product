options
{
  IGNORE_CASE = false;
  MULTI = true;
  VISITOR = true;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(ArduinoLang)

import java.io.*;
import java.util.*;


/** ArduinoLang class */
public class ArduinoLang {
	public static Hashtable ST = new Hashtable();

	/** Main entry point */
	public static void main(String args[]) throws ParseException, FileNotFoundException {
		String temp;
		STC temp2;

		if(args.length < 1) {
			// Prompt user for a file to compile
			System.out.println("Please pass in a filename of file to compile.");
			System.exit(1);
		}

		ArduinoLang parser = new ArduinoLang(new FileInputStream(args[0]));
		SimpleNode root = parser.Program();

		System.out.println("Abstract Syntax Tree:");

		root.dump(" ");

		System.out.println("==========================================");
		System.out.println("Symbol table:"); // Prints out a symbol tree

		Enumeration t = ST.keys();

		while (t.hasMoreElements()) {
			temp = (String)t.nextElement();
			temp2 = (STC)ST.get(temp);
			System.out.println(temp); // DOC HERE PLEASE

			if(temp2.type != null) {
				System.out.println(" type = " + temp2.type); // Print the type of the element
			}

			if(temp2.value != null) {
				System.out.println(" value = " + temp2.value); // Print the value of the element
			}

			if(temp2.stringValue != null) {
				System.out.println(" value = " + temp2.stringValue); // Print the value of the element if it is a string
			}
		}
		
		System.out.println("=========================================="); // New line
		System.out.println("Progam: "); 

		PrintVisitor pv = new PrintVisitor(); // Instantiate the print visitor
		root.jjtAccept(pv, null); // Print out the program

		System.out.println();
		System.out.println("Type Checking:");
		TypeCheckVisitor tc = new TypeCheckVisitor();
		root.jjtAccept(tc, ST); // Print out any type errors*/

	}
}

PARSER_END(ArduinoLang)

/* Skip whitespace */
SKIP :
{
	" "
| "\t"
| "\n"
| "\r"	
| "\f"
}

/* Comments */
MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN : /* Reserved words and literals */
{
	< SETUP : "setup()" >
|	< LOOP: "loop()" >	
|	< CALL: "call" >
|	< INSTANTIATE: "instantiate" >
|	< BOOLEAN: "boolean" >
|	< DOUBLE: "double" >
|	< ELSE: "else" >
|	< ELSEIF: "elseif" >
|	< FLOAT: "float" >
|	< IF: "if" >
|	< INT: "int" >
|	< NULL: "null" >
|	< STRING: "string" >
|	< WHILE: "while" >
| 	< DO: "do" >
| 	< END: "end" >
|   < VOID: "void" >
|   < FUNCTION: "function" >
|   < RETURN: "return" >
}

/* Literals */
TOKEN : 
{
	< INTEGER_LITERAL: 
		<DECIMAL_LITERAL> (["l", "L"])?
		| <MINUS><DECIMAL_LITERAL> (["l", "L"])?
	>
|	< #DECIMAL_LITERAL: ["0"-"9"] (["0" - "9"])* >

|	< FLOATING_POINT_LITERAL:
		  (["0" - "9"])+ "." (["0" - "9"])* (<EXPONENT>)? (["f", "F", "d", "D"])?
		| "." (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| (["0" - "9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]



		| <MINUS>(["0" - "9"])+ "." (["0" - "9"])* (<EXPONENT>)? (["f", "F", "d", "D"])?
		| <MINUS>(["0" - "9"])+ <EXPONENT> (["f", "F", "d", "D"])?
		| <MINUS>(["0" - "9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]
	>

|	< #EXPONENT: ["e", "E"] (["+","-"])? (["0" - "9"])+ > // Bruger vi den?

|	< CHARACTER_LITERAL:
		"'"
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)	
		"'"
	>

|	< STRING_LITERAL:
		"\""
		(	(~["'","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0" - "7"] ( ["0" - "7"] )?
				| ["0" -"3"] ["0" -"7"] ["0" - "7"] 
				)
			  )

		)*
		"\""
	>
}

/* Identifiers */
TOKEN :
{
	/*< IDENTIFIER: <LETTER> (<PART_LETTER>)* >*/

	< #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
		"A"-"Z",
		"_",
		"a"-"z"
      ]
	>

|	< #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]

	>	
}

TOKEN : /* Operators */
{
	< ASSIGN: "=" >
|	< COLON: ":" >
|	< BOOL_OP: "AND" | "OR" | "<=" | ">=" | "NOTEQUALS" | "EQUALS" | "NOT">
|   < LT: "<" >
|   < GT: ">" >
|	< ADD_OP: "+" >
|	< MINUS: "-" >
|	< MULTIPLY: "*" >
|	< DIVISION: 
		"/" ["1"-"9"] (["0" - "9"])* 
		| "/" <MINUS>["1"-"9"] (["0" - "9"])* >
|	< SQRT: "SQRT" >
|	< POSITIVENUMBER: "("["0"-"9"] (["0" - "9"])*")" >
|	< MOD: "%" >
| 	< POW: "^" >
|	< HASHTAG: "#" >
}


TOKEN : /* Seperators */
{
	< LPAREN: "(" >
|	< RPAREN: ")" >
|	< LBRACE: "{" >
|	< RBRACE: "}" >
|	< LBRACKET: "[" >
|	< RBRACKET: "]" >
|	< SEMICOLON: ";" >
|	< COMMA: "," >
|	< DOT: "." > 
|	< ID: ["a"-"z","A"-"Z","."] ( ["a"-"z","A"-"Z","0"-"9", "."] )* >
}

/*********************************************
*	LANGUAGE GRAMMAR STARTS HERE 							 *
*********************************************/

// Starting Simple node (program starts here), and runs until EOF is reached
SimpleNode Program() : {}
{   
	ProgramTop() ProgramContent() <EOF> {return jjtThis;}
}

/**
* ProgramContents is all the program besides the definitions and instantiations that can occur in the top
**/
void ProgramContent() #ProgramContent : {}
{
	ProgramSetup() ProgramLoop()
}

/**
* Alows the top of the program to be made
* @allows definitions to be made (#DEFINE ...)
* @allows class instantiations (instantiate CLASSNAME variable = ..)
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void ProgramTop() #ProgramTop : {Token t;}
{
	(
	t = <HASHTAG> Identifier() <LT> Identifier() <GT> {jjtThis.value = t.image;} #ProgramLibInclude(2)
	| ClassInstantiation()
	)*
}

/*void ProgramStart() #void : {Token t;}
{
	(ProgramTop() ProgramSetup() ProgramLoop())  #ProgramStart(2)
}
*/

/**
* ProgramSetup is defining how to Setup() function of a program should be made
* @accepts void Setup() do STATEMENT end
* @Hint Statements are optional so that the setup() function can be empty
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void ProgramSetup() #void : {Token t;}
{
	<VOID> t = <SETUP> <DO> [Statements()] <END> {jjtThis.value = t.image;} #ProgramSetup(1)
}

/**
* ProgramLoop defines how the Loop() function of a program must be defined
* @accepts void Loop() do STATEMENT end
* @Hint Satements are optional so that the loop() function can be empty
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void ProgramLoop() #void : {Token t;}
{
	<VOID> t = <LOOP> <DO> [Statements()] <END> {jjtThis.value = t.image;} #ProgramLoop(1)
}

/**
* Statements
* @allows the user to make more than one statement
**/
void Statements() #void : {}
{
	(SimpleStatement() [Statements() #Statements(2)])
}

/**
* SimpleStatement is defining what a statement can consist of
* @accepts Expression() e.g. c = a + b;
* @accepts Declarations e.g. int a = 10; int b = 2;
* @accepts Function calls e.g. call HelloWorld();
* @accepts If-statements e.g. if(BOOLEAN) do STATEMENT end
* @accepts While loops e.g. while(BOOLEAN) do STATEMENT end
* @accepts Class instantiations e.g. instantiate CLASSNAME VARIABLE = ...
**/
void SimpleStatement() #void : {}
{
	(Expression() | Declaration() | FunctionCall() | IfStatement() | WhileStatement() | ClassInstantiation())
}

/**
* Declaration Defines how a declaration must be made, and what types is allowed
* @accepts int NAME = EXPRESSION*; The value has to be a number that is following the rules of an integer. Decimals is not allowed
* @accepts float NAME = EXPRESSION*; The value has to be a number that is folowing the rules of an integer. Decimals is allowed.
* @accepts string NAME = EXPRESSION*; The value has to be text or numbers that follows the string_literal rules.
* @param Token t, this is the token that is sent to the PrintVisitor
* @param String name, this is the name that is sent to the STC class
* @Param Token value, this is the value of the declaration that is sent to the STC Class. This is used for int, and float
* @param String stringText, is used almost the same as Token value, but this is sending the text-value to STC class
**/
void Declaration() #Declaration : {Token t; String name; Token value; String stringText;}
{
	t = <INT> name = Identifier() <ASSIGN> (Expression())* <SEMICOLON> {jjtThis.value = t.image; ST.put(name, new STC("int", name));}
	| t = <FLOAT> name = Identifier() <ASSIGN> (Expression())* <SEMICOLON> {jjtThis.value = t.image; ST.put(name, new STC("float", name));}
	| t = <STRING> name = Identifier() <ASSIGN> (StringText())*  <SEMICOLON> {jjtThis.value = t.image; ST.put(name, new STC("string", name));}
	| t = <BOOLEAN> name = Identifier() <ASSIGN> BooleanNumber() <SEMICOLON>{jjtThis.value = t.image; ST.put(name, new STC("boolean", name));}
}
	
/**String DeclarationLogic() #void : {Token t;}
{
	<ASSIGN> t = Number() {jjtThis.value = t.image; return t.image;} #DeclarationLogic(1)
}*/

/**
* Expressions
* @accepts TERM (+ | -) EXPRESSION, plus and minus operation
* @accepts TERM  * EXPRESSION, multiply operation
* @accepts TERM / EXPRESSION, division operation
* @accepts TERM ^ EXPRESSION, power a number e.g. 2^2
* @accepts TERM (EXPRESSION), parenthesis can be used
* @accepts TERM % EXPRESSION, the modulus operation
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void Expression() #Expression : {Token t;}
{
	(<LPAREN> Expression() <RPAREN>
	|	Sqrt_op()
	|	Term()(
			(t = <ADD_OP> Expression()){jjtThis.value = t.image;} #Add_op(2)
			| (t = <MINUS> Expression()){jjtThis.value = t.image;} #Add_op(2)
			| (t = <MULTIPLY> Expression()){jjtThis.value = t.image;} #Add_op(2)
			| Divide_op()
			| (t = <POW><LPAREN>Expression()<RPAREN>){jjtThis.value = t.image;} #Add_op(2)
			| (t = <LPAREN> Expression()<RPAREN> {jjtThis.value = t.image;} #Add_op(2))
			| (t = <MOD> Expression()){jjtThis.value = t.image;} #Add_op(2)
			| Sqrt_op()
	)*
	)
}

void Divide_op() #Divide_op : {Token t;}
{
	(t = <DIVISION> [Expression()]){jjtThis.value = t.image;}
}

void Sqrt_op() #Sqrt_op : {Token t;}
{
	(<SQRT> t =<POSITIVENUMBER> [Expression()]){jjtThis.value = t.image;}
}

/**
* If-statement
* @accepts if(BOOLEAN) do STATEMENT end (ELSEIF)* [ELSE]
* @param Token t, this is the token that is sent to the PrintVisitor
* @hint The elseif statement is concatenated so that it can occur 0+ times
* @hint The else statement is set as optional
**/
void IfStatement() #If_stm : {Token t;}
{
	(t = <IF><LPAREN>BooleanExpression()<RPAREN> <DO> Statements() <END> (ElseifStatement())* [ElseStatement()] {jjtThis.value = t.image;})
}

/**
* Elseif-statement
* @accepts elseif(BOOLEAN) do STATEMENT end
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void ElseifStatement() #ElsIf_stm : {Token t;}
{
	(t = <ELSEIF><LPAREN>BooleanExpression()<RPAREN> <DO> Statements() <END>{jjtThis.value = t.image;})
}

/**
* Else statement
* @accepts else do STATEMENT end
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void ElseStatement() #void : {Token t;}
{
	(t = <ELSE> <DO> Statements() <END>) {jjtThis.value = t.image;} #Els_stm(1)
}

/**
* While statement - This is the only loop functionality in the language
* @accepts while(BOOLEAN) do STATEMENT end
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void WhileStatement() #void : {Token t;}
{
	(t = <WHILE> <LPAREN> BooleanExpression() <RPAREN> <DO> Statements() <END>) {jjtThis.value = t.image;} #WhileStatement(2)
}

/**
* BooleanExpression defines what boolean expressions consist of
* @accepts EXPRESSION (AND | OR | <= | >= | NOTEQUALS | EQUALS | NOT) EXPRESSION e.g. (a AND c) NOTEQUALS c
* @accepts EXPRESSION > EXPRESSION e.g. a > b
* @accepts EXPRESSION < EXPRESSION e.g. a < b
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void BooleanExpression() #void : {Token t;}
{
	(<LPAREN>BooleanExpression()<RPAREN>
	| Expression()(
		t = <BOOL_OP> Expression() {jjtThis.value = t.image;} #Bool_op(2)
	|	t = <LT> Expression() {jjtThis.value = t.image;} #Bool_op(2)
	|	t = <GT> Expression() {jjtThis.value = t.image;} #Bool_op(2)

	)*)
}

/**
* FunctionCall defines how a function must be called
* @accepts call FUNCTIONNAME(PARAMETERS);
* @hint function calls can consist of multiple calls seperated by a "." e.g. System.out.print(PAMETERS);
* @hint a function can consist of zero parameters
* @param Token t, this is the token that is sent to the PrintVisitor
**/
void FunctionCall() #FunctionCall : {Token t; String name;}
{ //System(dsada)
	<CALL> name = Identifier() (Identifier())* <LPAREN>(Parameters())*<RPAREN><SEMICOLON>
}

/**
* ClassInstantiation defines how a class must be instantiated
* @accepts instantiate CLASSNAME VARIABLE(PARAMETERS); e.g. instantiate LCDDisplay lcd();
* @hint the class instantiation can consist of zero parameters
**/
void ClassInstantiation() #ClassInstantiation : {}
{
	<INSTANTIATE> Identifier() (Identifier())* <LPAREN>(Parameters())*<RPAREN><SEMICOLON>
}

/**
* Parameters defines how parameters must be defined, and what to return to the PrintVisitor
* @accepts NUMBER or NUMBER (("," | "%" | "*" | "/" | (+ | -)) PARAMETER)* - It is concatenated 
* @accepts STRINGTEXT or STRINGTEXT (, PARAMETER)* - Concatenated
* @accepts IDENTIFIER or IDENTIFIER (, PARAMETER)* - Concatenated
* @param Token t, this is the token that is sent to the PrintVisitor
* @param String text, this is used for the String and Identifier to sent the data to the PrintVisitor class.
**/
void Parameters() #Parameter : {Token t; String text;}
{
	((t = Number()((("," | <MOD> | <MULTIPLY> | <DIVISION> | <ADD_OP>) Parameters())*){jjtThis.value = t;}
|	(text = StringText()("," Parameters())*){jjtThis.value = text;}
|	(text = Identifier()("," Parameters())*){jjtThis.value = text;}
))
}

/**
* Term
* @accepts NUMBER or IDENTIFIER
**/
void Term() #void : {}
{
	(Number() | Identifier())
}

Token BooleanNumber() : {Token t;}
{
	t = <POSITIVENUMBER> {jjtThis.value = t.image; return t;}
}

/**
* Number - this is defining how all the numbers in the language has to be defined
* @accepts <INTEGER_LITERAL> 
* @accepts <FLOATING_POINT_LITERAL>
* @return Token t - this is used by other methods
**/
Token Number() : {Token t;}
{
	(
		t = <INTEGER_LITERAL> {jjtThis.value = t.image; return t;}
		| t = <FLOATING_POINT_LITERAL> {jjtThis.value = t; return t;}
	)
}

/**
* StringText defines how strings has to be defined. 
* @accepts e.g. "Hello World!" do not accept: Hello World!
* @return String t.image
**/
String StringText() : {Token t;}
{
	t = <STRING_LITERAL> {jjtThis.value = t.image; return t.image;}
}

/**
* Identifier - is used by other methods where text has to be written but without \"".. e.g. Print, or variable names.
* @accepts <ID>
* @return String t.image
**/
String Identifier() : {Token t;}
{
	t = <ID> {jjtThis.value = t.image; return t.image;}
}


